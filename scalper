#!/usr/bin/env ruby
EXE=`basename #{__FILE__}`.strip
if !system("which #{EXE} 2>/dev/null >/dev/null")
  puts "#{EXE} is not in your PATH available ... add it with:\n\texport PATH=$PATH:#{`readlink -f $(dirname #{__FILE__})`}\n"
  exit 1
end

require 'rubygems'
require 'json'
require 'pp'

CONTEXT_DIR="/root/scalarium-agent/log/chef/"
#CONTEXT_DIR="/tmp"

USED_CONTEXT_FILE="#{CONTEXT_DIR}/.scalper_context"
CURRENT_CONTEXT=File.exists?(USED_CONTEXT_FILE) ? File.read(USED_CONTEXT_FILE) : `ls -1 #{CONTEXT_DIR}/*.json | tail -n 1`.strip
CHEF_LOG_DIR="/root/scalarium-agent/log/chef/"
CURRENT_LOG=`ls -1 #{CHEF_LOG_DIR}/*.log 2>/dev/null | tail -n 1`.strip
TMP_CONTEXT_PATH="/tmp"
TMP_UPDATE_CONTEXTS_PATH="/tmp/scalper-tmp-site-cookbooks"
CHEF_EXECUTABLE="/root/scalarium-agent/bin/chef-solo -c /root/scalarium-agent/config/solo.rb -j" 
SITE_COOKBOOKS_DIR="/root/scalarium-agent/site-cookbooks"
SCALARIUM_COOKBOOKS_DIR="/root/scalarium-agent/cookbooks"
ALL_SCALARIUM_RECIPES=`cd #{SCALARIUM_COOKBOOKS_DIR};  find  */recipes | grep -v default.rb | grep "\.rb$"`.gsub(/\/recipes\//, '::').gsub(/\.rb$/,'').split("\n")
if File.directory?(SITE_COOKBOOKS_DIR)
  ALL_SITE_RECIPES=`cd #{SITE_COOKBOOKS_DIR};  find  */recipes | grep -v default.rb | grep "\.rb$"`.gsub(/\/recipes\//, '::').gsub(/\.rb$/,'').split("\n")
else
  ALL_SITE_RECIPES=[]
end

config_data = JSON.load(File.read(CURRENT_CONTEXT))


if ARGV[0] == "show"
  pp config_data
elsif ARGV[0] == "info"
  puts "Most important paths ... type:"
  puts "\tcd %-40s# to change to the %s" % [CHEF_LOG_DIR, "chef log dir"]
  puts "\tcd %-40s# to change to the %s" % [SITE_COOKBOOKS_DIR, "custom chef recipes dir"]
  puts "\tcd %-40s# to change to the %s" % [SCALARIUM_COOKBOOKS_DIR, "scalarium recipes dir"]

  config_data["deploy"].each do |application, stuff|
    next unless stuff["deploy_to"] || !File.exists?(stuff["deploy_to"])
    puts "\tcd %-40s# to change to the %s app" % ["#{stuff["deploy_to"]}/current", application]
  end

  puts "\tvim %-39s# to see the cluster state" % ["/var/lib/scalarium/cluster_state.json"]

elsif ARGV[0] == "list" && ARGV[1] == "all"
  puts "\n\nall scalarium recipes:"
  puts 
  puts "\t#{ALL_SCALARIUM_RECIPES.join("\n\t")}"
  puts "\n\nall site recipes:"
  puts 
  puts "\t#{ALL_SITE_RECIPES.join("\n\t")}"
  

elsif ARGV[0] == "list"

  puts "current context's recipes:"
  puts 
  puts "\t#{config_data["recipes"].join("\n\t")}"
  puts 

  puts "current context's custom recipes:"
  puts 
  puts "\t#{config_data["scalarium_custom_cookbooks"]["recipes"] ? config_data["scalarium_custom_cookbooks"]["recipes"].join("\n\t") : "\tnone"}"


elsif ARGV[0] == "update" && ARGV[1] == "self"
    system "curl http://github.com/moviepilot/scalper/raw/master/scalper-installer > /tmp/scalper-installer"
    system "sh /tmp/scalper-installer"
elsif ARGV[0] == "update"
  custom_cookbooks_url = config_data["scalarium_custom_cookbooks"]["scm"]["repository"]
  if !custom_cookbooks_url
    puts "the current configuration does not seem to have custom recipes"
  end
  if config_data["scalarium_custom_cookbooks"]["scm"]["type"] != "git"
    puts "only git repositories are supported at the moment"
    exit 3
  end

  system("mkdir -p #{TMP_UPDATE_CONTEXTS_PATH}; cd #{TMP_UPDATE_CONTEXTS_PATH}; git clone --depth 1 #{custom_cookbooks_url}; mv #{SITE_COOKBOOKS_DIR} #{SITE_COOKBOOKS_DIR}.bak_$(date +\"%F_%T\") 2>/dev/null; rm -rf */.git; rm */* 2>/dev/null; mv * #{SITE_COOKBOOKS_DIR}; rm -rf #{TMP_UPDATE_CONTEXTS_PATH}")

elsif ARGV[0] == "tail"
  system("less +F #{CURRENT_LOG}")
elsif ARGV[0] == "exec"
  if ARGV.size == 1
    command = "#{CHEF_EXECUTABLE} #{CURRENT_CONTEXT}"

    puts "executing current chef config:"
    puts "\t#{command}\n\n"

    system(command)
    puts "\n\n\n\n\n************************************** finished executing command:\n\t#{command}\n\n"
  else
    recipes = ARGV[1].split(",")
    tmp_recipe = "#{TMP_CONTEXT_PATH}/chef_config__#{ARGV[1].gsub("::", "-").gsub(",", "__")}.json"
    
    config_data["recipes"] = config_data["recipes"].select{|x| recipes.include?(x)}
    config_data["recipes"] << ALL_SCALARIUM_RECIPES.select{|x| recipes.include?(x)}
    config_data["scalarium_custom_cookbooks"]["recipes"] = config_data["scalarium_custom_cookbooks"]["recipes"].select{|x| recipes.include?(x)}
    config_data["scalarium_custom_cookbooks"]["recipes"] << ALL_SITE_RECIPES.select{|x| recipes.include?(x)}


    if not config_data["scalarium_custom_cookbooks"].empty?
      config_data["recipes"].unshift("scalarium_custom_cookbooks::load") 
      config_data["recipes"] << "scalarium_custom_cookbooks::execute"
      config_data["recipes"].uniq!
    end

    f = File.open(tmp_recipe, "w")
    f << config_data.to_json
    f.close

    command = "#{CHEF_EXECUTABLE} #{tmp_recipe}"
    puts "executing temporary chef config:"
    puts "\t#{command}\n\n"

    system(command)
    puts "\n\n\n\n\n************************************** finished executing command:\n\t#{command}\n\n"
  end
elsif ARGV[0] == "context"
  if ARGV.length == 1
    contexts = []
    Dir.glob("#{CONTEXT_DIR}/*.json").each do |file|
      contexts << JSON.load(File.read(file))["scalarium"]["activity"]
    end
    puts "The following contexts are available:"
    puts "\t#{contexts.uniq.join("\n\t")}"
    puts
    puts "current context is: #{config_data["scalarium"]["activity"]} (file: #{CURRENT_CONTEXT})"
    puts
  else
    Dir.glob("#{CONTEXT_DIR}/*.json").reverse.each do |file|
      if JSON.load(File.read(file))["scalarium"]["activity"] == ARGV[1]
        f = File.open(USED_CONTEXT_FILE, "w")
        f << file
        f.close
        puts 
        puts "context set to \"#{ARGV[1]}\" (file: #{file})"
        puts
        exit 0
      end

    end

    puts
    puts "could not find any config with context \"#{ARGV[1]}\""
    puts

    exit 1
  end
else 
  puts <<EOF

Usage: #{EXE} command
  
  commands:
    show              show current configuration
    context           show available contexts
    context <context> switch to context <context>
    list              list the chef recipes of the current config
    list all          list all chef recipes available
    update            update custom cookbooks (only public git repos are supported)
    update self       update scalper
    tail              tail current log (uses "less")
    exec              execute all recipes of the current role
    exec <recipes>    only execute the specified recipes (separate by comma without blanks)  
    info              output the most important paths

EOF
end
